setwd("C:/Users/pipe0902/Kruvelab/Anneli Kruve - Toxicity project data/data_csv for coding")
similarity_data_selected <- read_delim("FinalModels/20211116_similarity_data_fishstat_finalfp200.csv", delim = ";")
library(tidyverse)
library(janitor)
library(coop)
setwd("C:/Users/pipe0902/Kruvelab/Anneli Kruve - Toxicity project data/data_csv for coding")
similarity_data_selected <- read_delim("FinalModels/20211116_similarity_data_fishstat_finalfp200.csv", delim = ";")
heatmap_graph <- similarity_data_selected %>%
column_to_rownames(var = "rowname")
similarity_comparison <- similarity_data_selected %>%
filter(rowname == "DTXSID7021784")
similarity_data_matrix <- as.matrix(heatmap_graph)
my_colors <- colorRampPalette(c("red", "green"))
heapmap <- heatmap(similarity_data_matrix, col = my_colors(100))
heatmap(similarity_data_matrix)
my_colors <- colorRampPalette(c("red", "green"))
heapmap <- heatmap(similarity_data_matrix, col = my_colors(100))
heapmap <- heatmap(similarity_data_matrix, col = my_colors(1))
heapmap <- heatmap(similarity_data_matrix, col = my_colors(2))
heapmap <- heatmap(similarity_data_matrix, col = my_colors(10))
heapmap <- heatmap(similarity_data_matrix, col = my_colors(100))
heapmap <- heatmap(similarity_data_matrix, col = my_colors(10))
heapmap <- heatmap(similarity_data_matrix, col = my_colors(100))
heapmap <- heatmap(similarity_data_matrix, col = my_colors(10))
heapmap <- heatmap(similarity_data_matrix, col = my_colors(2))
heapmap <- heatmap(similarity_data_matrix, col = my_colors(10))
View(similarity_data_selected)
View(similarity_data_matrix)
#-------Similarity analysis---getting new data--------
setwd("C:/Users/pipe0902/Kruvelab/Anneli Kruve - Toxicity project data/data_csv for coding")
fp_sirius <- read_delim("SIRIUS_MassBank/common_fp_list_s495.txt", delim = ";") %>%
mutate(colnam = paste("Un", absoluteIndex, sep = "")) %>%
select(colnam)
fp_calc <- as.data.frame(colnames(read_delim("CalculatedFingerprints/calcul_fp_20211005.csv", delim = ";")))
colnames(fp_calc) <- "colnam"
fp_model <- fp_sirius %>%
inner_join(fp_calc)
fp_model <- as.vector(fp_model$colnam)
#trainset
setwd("C:/Users/pipe0902/Kruvelab/Anneli Kruve - Toxicity project data/data_csv for coding")
trainnames <- read_delim("FinalModels/20211103_xgbDART_fish_stat_testtrain_results.csv", delim = ";") %>%
filter(split_first == " TRAIN") %>%
select(dtxsid) %>%
unique() %>%
left_join(read_delim("CalculatedFingerprints/calcul_fp_20211005.csv", delim = ";")) %>%
select(dtxsid, all_of(fp_model))
sel200_fp <- colnames(read_delim("FinalModels/20211103_xgbDART_fish_stat_testtrain_results.csv", delim = ";"))
traindata <- trainnames%>%
column_to_rownames(var = "dtxsid")
validnames <- read_delim("FinalModels/LC50_fish_static_xgbDART_valid_results.csv", delim = ";") %>%
filter(cor_comp == "correct") %>%
select(dtxsid) %>%
unique() %>%
left_join(read_delim("CalculatedFingerprints/calcul_fp_20211005.csv", delim = ";")) %>%
select(dtxsid, all_of(fp_model))
fish_validdata <- validnames %>%
column_to_rownames(var = "dtxsid")
train <- traindata
valid <- fish_validdata
train <- train %>%
select(one_of(sel200_fp))
valid <- valid %>%
select(one_of(sel200_fp))
similarity_data <- tibble()
for (n in 1:length(train$Un55)){
fp_row <- unlist(train[n,])
column_empty <- tibble()
for(m in 1:length(valid$Un55)){
fp_row_wo <- unlist(valid[m,])
similarity <- as.data.frame(cosine(fp_row, fp_row_wo))
column_empty <- column_empty %>%
rbind(similarity)
}
#print(column_empty)
if (length(similarity_data) == 0) {
similarity_data <- column_empty
} else {
similarity_data <- similarity_data %>%
bind_cols(column_empty)
}
}
rownames(similarity_data) <- validnames$dtxsid
colnames(similarity_data) <- trainnames$dtxsid
testing <- similarity_data %>%
rownames_to_column()
similarity_data_matrix <- similarity_data
similarity_data_matrix <- as.matrix(similarity_data_matrix)
my_colors <- colorRampPalette(c("red", "green"))
my_colors <- colorRampPalette(c("red", "green"))
heapmap <- heatmap(similarity_data_matrix, col = my_colors(10))
setwd("C:/Users/pipe0902/Kruvelab/Anneli Kruve - Toxicity project data/I article/Graphs")
ggsave("heatmap_rowval_coltrain_new10step.jpg", width = 20, height = 13, units = "cm")
setwd("C:/Users/pipe0902/Kruvelab/Anneli Kruve - Toxicity project data/I article/Graphs")
ggsave("heatmap_rowval_coltrain_new10step.jpg", width = 20, height = 13, units = "cm")
heapmap <- heatmap(similarity_data_matrix, col = my_colors(100))
heapmap <- heatmap(similarity_data_matrix, col = my_colors(100))
heapmap <- heatmap(similarity_data_matrix, col = my_colors(10))
View(similarity_data_matrix)
setwd("C:/Users/pipe0902/Kruvelab/Anneli Kruve - Toxicity project data/data_csv for coding")
similarity_data_selected <- read_delim("FinalModels/20211116_similarity_data_fishstat_finalfp200.csv", delim = ";")
heatmap_graph <- similarity_data_selected %>%
column_to_rownames(var = "rowname")
similarity_comparison <- similarity_data_selected %>%
filter(rowname == "DTXSID7021784")
similarity_data_matrix <- as.matrix(heatmap_graph)
my_colors <- colorRampPalette(c("red", "green"))
heapmap <- heatmap(similarity_data_matrix, col = my_colors(10))
heapmap <- heatmap(similarity_data_matrix, col = my_colors(100))
setwd("C:/Users/pipe0902/Kruvelab/Anneli Kruve - Toxicity project data/I article/Graphs")
ggsave("heatmap_rowval_coltrain_new10step.jpg", width = 20, height = 13, units = "cm")
my_colors <- colorRampPalette(c("red", "green"))
heapmap <- heatmap(similarity_data_matrix, col = my_colors(10))
heapmap <- heatmap(similarity_data_matrix, scale = column, col = my_colors(10))
heapmap <- heatmap(similarity_data_matrix, scale = "column", col = my_colors(10))
legend(x="bottomright", legend=c("min", "ave", "max"),
fill=colorRampPalette(brewer.pal(8, "Oranges"))(3))
legend()
legend(heatmap)
heapmap <- heatmap(similarity_data_matrix, col = my_colors(10), legend = c("col"))
heapmap <- heatmap(similarity_data_matrix, col = my_colors(10), legend = "col")
heapmap <- heatmap(similarity_data_matrix, col = my_colors(10), legend = "column")
heapmap <- heatmap(similarity_data_matrix, col = my_colors(10))
View(similarity_data_matrix)
# similarity_data_$max <- apply(similarity_data_, 1, max)
# similarity_data_$median <- apply(similarity_data_, 1, median)
heatmap_analysis <- similarity_data_matrix %>%
group_by(dtxsid) %>%
mutate(maxvalue = max()) %>%
mutate(minvalue = min()) %>%
ungroup()
heatmap_analysis <- similarity_data_matrix %>%
rownames_to_column()
heatmap_analysis <- similarity_data_matrix
heatmap_analysis <- similarity_data_matrix %>%
rownames_to_column()
heatmap_analysis <- similarity_data_matrix %>%
mutate(dtxsid = rownames(similarity_data_matrix))
rownames(similarity_data_matrix)
heatmap_analysis <- similarity_data_matrix %>%
mutate(dtxsid = rownames(similarity_data_matrix))
heatmap_analysis <- similarity_data_matrix %>%
mutate(dtxsid = rownames())
heatmap_analysis <- similarity_data_matrix %>%
row_to_names()
heatmap_analysis <- similarity_data_matrix %>%
rownames_to_column(similarity_data_matrix)
# similarity_data_$max <- apply(similarity_data_, 1, max)
# similarity_data_$median <- apply(similarity_data_, 1, median)
heatmap_analysis <- rownames_to_column()
# similarity_data_$max <- apply(similarity_data_, 1, max)
# similarity_data_$median <- apply(similarity_data_, 1, median)
heatmap_analysis <- rownames_to_column(similarity_data_matrix)
# similarity_data_$max <- apply(similarity_data_, 1, max)
# similarity_data_$median <- apply(similarity_data_, 1, median)
heatmap_analysis <- rownames_to_column(similarity_data_matrix, "VALUE")
# similarity_data_$max <- apply(similarity_data_, 1, max)
# similarity_data_$median <- apply(similarity_data_, 1, median)
heatmap_analysis <- add_rownames()
# similarity_data_$max <- apply(similarity_data_, 1, max)
# similarity_data_$median <- apply(similarity_data_, 1, median)
heatmap_analysis <- tibble::rownames_to_column(similarity_data_matrix, var = "row")
heatmap_analysis <- similarity_data %>%
rownames_to_column(similarity_data)
heatmap_analysis <- rownames_to_column(similarity_data)
View(heatmap_analysis)
View(similarity_data_matrix)
# similarity_data_$max <- apply(similarity_data_, 1, max)
# similarity_data_$median <- apply(similarity_data_, 1, median)
heatmap_analysis <- rownames_to_column(similarity_data) %>%
group_by(dtxsid) %>%
mutate(maxvalue = max()) %>%
mutate(minvalue = min()) %>%
ungroup()
# similarity_data_$max <- apply(similarity_data_, 1, max)
# similarity_data_$median <- apply(similarity_data_, 1, median)
heatmap_analysis <- rownames_to_column(similarity_data, val = "dtxsid") %>%
group_by(dtxsid) %>%
mutate(maxvalue = max()) %>%
mutate(minvalue = min()) %>%
ungroup()
heatmap_analysis <- rownames_to_column(similarity_data, "dtxsid")
# similarity_data_$max <- apply(similarity_data_, 1, max)
# similarity_data_$median <- apply(similarity_data_, 1, median)
heatmap_analysis <- rownames_to_column(similarity_data, "dtxsid") %>%
group_by(dtxsid) %>%
mutate(maxvalue = max()) %>%
mutate(minvalue = min()) %>%
ungroup()
# similarity_data_$max <- apply(similarity_data_, 1, max)
# similarity_data_$median <- apply(similarity_data_, 1, median)
heatmap_analysis <- rownames_to_column(similarity_data, "dtxsid") %>%
group_by(dtxsid) %>%
mutate(maxvalue = max()) %>%
mutate(minvalue = min()) %>%
ungroup() %>%
select(dtxsid, maxvalue, minvalue)
heatmap_analysis <- rownames_to_column(similarity_data, "dtxsid")
# similarity_data_$max <- apply(similarity_data_, 1, max)
# similarity_data_$median <- apply(similarity_data_, 1, median)
heatmap_analysis <- rownames_to_column(similarity_data, "dtxsid") %>%
select(-dtxsid) %>%
group_by(dtxsid) %>%
mutate(maxvalue = max()) %>%
mutate(minvalue = min()) %>%
ungroup() %>%
select(maxvalue, minvalue)
# similarity_data_$max <- apply(similarity_data_, 1, max)
# similarity_data_$median <- apply(similarity_data_, 1, median)
heatmap_analysis <- rownames_to_column(similarity_data, "dtxsid") %>%
group_by(dtxsid) %>%
select(-dtxsid) %>%
mutate(maxvalue = max()) %>%
mutate(minvalue = min()) %>%
ungroup() %>%
select(maxvalue, minvalue)
library(MS2Tox)
library(MS2Tox)
library(dplyr)
library(rlist)
library(Rdisop)
library(tibble)
library(readr)
library(magrittr)
library(xgboost)
library(tidyselect)
library(stringr)
folderwithSIRIUSfiles<- "C:/Users/pipe0902/Desktop/SIRIUS_testing_202208"
mode <- LC50mode
error_message = ""
subfolder <- dir(folderwithSIRIUSfiles, all.files = TRUE, recursive = TRUE, pattern = ".fpt")
subfolder_score <- dir(folderwithSIRIUSfiles, all.files = TRUE, recursive = TRUE, pattern = ".info")
fp_names_pos <- paste("Un", read_delim(paste(folderwithSIRIUSfiles,"/csi_fingerid.tsv", sep = ""), delim = "\t")$absoluteIndex, sep = "")
fp_names_neg <- paste("Un", read_delim(paste(folderwithSIRIUSfiles,"/csi_fingerid_neg.tsv", sep = "" ), delim = "\t")$absoluteIndex, sep = "")
fp_names_common <- as.data.frame(fp_names_pos)  %>%
mutate(fp_names_neg = fp_names_pos) %>%
inner_join(as.data.frame(fp_names_neg))
subfolder <- dir(folderwithSIRIUSfiles, all.files = TRUE, recursive = TRUE, pattern = ".fpt")
subfolder_score <- dir(folderwithSIRIUSfiles, all.files = TRUE, recursive = TRUE, pattern = ".info")
fp_names_pos <- paste("Un", read_delim(paste(folderwithSIRIUSfiles,"/csi_fingerid.tsv", sep = ""), delim = "\t")$absoluteIndex, sep = "")
folderwithSIRIUSfiles<- "C:/Users/pipe0902/Desktop/SIRIUS_testing_202208/results_495_CHONP"
subfolder <- dir(folderwithSIRIUSfiles, all.files = TRUE, recursive = TRUE, pattern = ".fpt")
subfolder_score <- dir(folderwithSIRIUSfiles, all.files = TRUE, recursive = TRUE, pattern = ".info")
fp_names_pos <- paste("Un", read_delim(paste(folderwithSIRIUSfiles,"/csi_fingerid.tsv", sep = ""), delim = "\t")$absoluteIndex, sep = "")
fp_names_neg <- paste("Un", read_delim(paste(folderwithSIRIUSfiles,"/csi_fingerid_neg.tsv", sep = "" ), delim = "\t")$absoluteIndex, sep = "")
fp_names_common <- as.data.frame(fp_names_pos)  %>%
mutate(fp_names_neg = fp_names_pos) %>%
inner_join(as.data.frame(fp_names_neg))
fp_names_common <- as.vector(fp_names_common$fp_names_pos)
subfolder_pos <- c()
subfolder_neg <- c()
for(subfold in subfolder){
if ((grepl("]2+", subfold, fixed=TRUE) | grepl("]+", subfold, fixed=TRUE)) & grepl("/fingerprint", subfold, fixed=TRUE)){
subfolder_pos <- subfolder_pos %>%
list.append(subfold)
}
if ((grepl("]2-", subfold, fixed=TRUE) | grepl("]-", subfold, fixed=TRUE)) & grepl("/fingerprint", subfold, fixed=TRUE)){
subfolder_neg <- subfolder_neg %>%
list.append(subfold)
}
}
fp_pos <- FingerPrintTablePOS(subfolder_pos, folderwithSIRIUSfiles)
#' @export
FingerPrintTablePOS <- function(subfolder, folderwithSIRIUSfiles){
fingerprint_data <- tibble()
for(direct in subfolder){
# subfolder with data must be on a form where id is on second place after nr_ (0_Einc270001_Einc270001)
file_name <- str_split(direct, "_")
comp_name <- str_split(direct, "/")
sir_fold <- file_name[[1]][1]
id_this <- file_name[[1]][2] # if id in some other position, this can be changed
pred_ion <- comp_name[[1]][3]
filedata <- read_delim(paste(folderwithSIRIUSfiles, direct, sep = "/"), delim = " ", col_names = FALSE)
filedata <- as_tibble(t(filedata))
filedata <- filedata %>%
mutate(predion = pred_ion) %>%
mutate(predion = sub("\\..*", "", predion)) %>%
mutate(id = id_this) %>%
mutate(sir_fol_nr = sir_fold) %>%
mutate(predform = sub("\\_.*", "", predion))
fingerprint_data <- fingerprint_data %>%
bind_rows(filedata)
}
return(fingerprint_data)
}
#' @export
FingerPrintTableNEG <- function(subfolder, folderwithSIRIUSfiles){
fingerprint_data <- tibble()
for(direct in subfolder){
# subfolder with data must be on a form where id is on second place after nr_ (0_Einc270001_Einc270001)
file_name <- str_split(direct, "_")
comp_name <- str_split(direct, "/")
sir_fold <- file_name[[1]][1]
id_this <- file_name[[1]][2]
pred_ion <- comp_name[[1]][3]
filedata <- read_delim(paste(folderwithSIRIUSfiles, direct, sep = "/"), delim = " ", col_names = FALSE)
filedata <- as_tibble(t(filedata))
filedata <- filedata %>%
mutate(predion = pred_ion) %>%
mutate(predion = sub("\\..*", "", predion)) %>%
mutate(id = id_this) %>%
mutate(sir_fol_nr = sir_fold) %>%
mutate(predform = sub("\\_.*", "", predion))
fingerprint_data <- fingerprint_data %>%
bind_rows(filedata)
}
return(fingerprint_data)
}
subfolder_pos <- c()
subfolder_neg <- c()
for(subfold in subfolder){
if ((grepl("]2+", subfold, fixed=TRUE) | grepl("]+", subfold, fixed=TRUE)) & grepl("/fingerprint", subfold, fixed=TRUE)){
subfolder_pos <- subfolder_pos %>%
list.append(subfold)
}
if ((grepl("]2-", subfold, fixed=TRUE) | grepl("]-", subfold, fixed=TRUE)) & grepl("/fingerprint", subfold, fixed=TRUE)){
subfolder_neg <- subfolder_neg %>%
list.append(subfold)
}
}
fp_pos <- FingerPrintTablePOS(subfolder_pos, folderwithSIRIUSfiles)
if(nrow(fp_pos) != 0){
colnames(fp_pos) <- c(fp_names_pos, "predion", "id", "foldernumber", "predform")
}
fp_neg <- FingerPrintTableNEG(subfolder_neg, folderwithSIRIUSfiles)
if(nrow(fp_neg) != 0){
colnames(fp_neg) <- c(fp_names_neg, "predion", "id", "foldernumber", "predform")
}
if (!is.null(subfolder_neg) & !is.null(subfolder_pos)){
fp_all <- fp_pos %>%
select(id, foldernumber, predform, predion, all_of(fp_names_common)) %>%
bind_rows(fp_neg %>% select(id, foldernumber, predform, predion, all_of(fp_names_common))) %>%
unique()
}
if (is.null(subfolder_neg) & !is.null(subfolder_pos)){
fp_all <- fp_pos %>%
select(id, foldernumber, predform, predion, all_of(fp_names_common)) %>%
unique()
}
if (!is.null(subfolder_neg) & is.null(subfolder_pos)){
fp_all <- fp_neg %>%
select(id, foldernumber, predform, predion, all_of(fp_names_common)) %>%
unique()
}
if (is.null(subfolder_neg) & is.null(subfolder_pos)){
print("NO data found in subfolders")
}
View(fp_all)
scores_table <- tibble()
scores_table <- scores_table %>%
mutate(id = "id") %>%
mutate(foldernumber = "sirfolnr") %>%
mutate(siriusscore = "siriusscore")
for (filename in subfolder_score) {
if (grepl("/scores", filename, fixed=TRUE)){
file_name_score <- str_split(filename, "_")
comp_name_score <- str_split(filename, "/")
foldernumber <- file_name_score[[1]][1]
id <- file_name_score[[1]][2] #if id is not in second place, [2] must be changed
pred_st <- comp_name_score[[1]][3]
fileConnection <- file(paste(folderwithSIRIUSfiles, filename, sep = "/"))
record <- readLines(fileConnection)
close(fileConnection)
SiriusScore <- substring(grep('sirius.scores.SiriusScore', record, value = TRUE, fixed = TRUE),27)
filedata <- data.frame(id , foldernumber)
filedata <- filedata %>%
mutate(predion = pred_st) %>%
mutate(predion = sub("\\..*", "", predion)) %>%
mutate(siriusscore = SiriusScore)
scores_table <- scores_table%>%
bind_rows(filedata)
}
}
View(scores_table)
View(scores_table)
# library(dplyr)
# library(rlist)
# library(Rdisop)
# library(tibble)
# library(readr)
# library(magrittr)
# library(xgboost)
# library(tidyselect)
# library(stringr)
library(rcdklibs)
library(rcdk)
#' @export
FishLC50Prediction <- function(folderwithSIRIUSfiles, LC50mode = "static") {
mode <- LC50mode
error_message = ""
if(mode == "static"){
FishModel <- readRDS("R/20211118_fish_stat_finalapplic.rds")
} else if(mode == "flow"){
FishModel <- readRDS("R/20211126_fish_flow_finalapplic.rds")
} else{
error_message = 'LC50mode must me either "static" or "flow"'
}
if (error_message != 'LC50mode must me either "static" or "flow"') {
inputtable <- FpTableForPredictions(folderwithSIRIUSfiles)
predictions <- inputtable %>%
mutate(LC50_predicted = predict(FishModel, newdata = inputtable)) %>%
select(id, foldernumber, LC50_predicted, predform, predion) %>%
unique()
#return(predictions)
} else {
print('LC50mode must me either static or flow')
predictions = "LC50mode must me either static or flow"
}
return(predictions)
}
#' @export
FpTableForPredictions <- function(folderwithSIRIUSfiles){
subfolder <- dir(folderwithSIRIUSfiles, all.files = TRUE, recursive = TRUE, pattern = ".fpt")
subfolder_score <- dir(folderwithSIRIUSfiles, all.files = TRUE, recursive = TRUE, pattern = ".info")
fp_names_pos <- paste("Un", read_delim(paste(folderwithSIRIUSfiles,"/csi_fingerid.tsv", sep = ""), delim = "\t")$absoluteIndex, sep = "")
fp_names_neg <- paste("Un", read_delim(paste(folderwithSIRIUSfiles,"/csi_fingerid_neg.tsv", sep = "" ), delim = "\t")$absoluteIndex, sep = "")
fp_names_common <- as.data.frame(fp_names_pos)  %>%
mutate(fp_names_neg = fp_names_pos) %>%
inner_join(as.data.frame(fp_names_neg))
fp_names_common <- as.vector(fp_names_common$fp_names_pos)
selected_rank1_table <- FingerPrintTable(subfolder, fp_names_pos, fp_names_neg, fp_names_common, folderwithSIRIUSfiles) %>%
inner_join(SiriusScoreRank1(subfolder_score, folderwithSIRIUSfiles), by = c("id", "foldernumber", "predion"))
final_table_mass <- selected_rank1_table %>%
mutate(exactMass = "mass")
for(n in 1:length(final_table_mass$predform)){
molecule = getMolecule(final_table_mass$predform[[n]])
final_table_mass$exactMass[[n]] = getMass(molecule)
}
final_table_mass <- final_table_mass %>%
mutate(exactMass = as.numeric(exactMass)) %>%
select(id, foldernumber, predform, predion, exactMass, everything())
return(final_table_mass)
}
#' @export
FingerPrintTable <- function(subfolder, fp_names_pos, fp_names_neg, fp_names_common, folderwithSIRIUSfiles){
subfolder_pos <- c()
subfolder_neg <- c()
for(subfold in subfolder){
if ((grepl("]2+", subfold, fixed=TRUE) | grepl("]+", subfold, fixed=TRUE)) & grepl("/fingerprint", subfold, fixed=TRUE)){
subfolder_pos <- subfolder_pos %>%
list.append(subfold)
}
if ((grepl("]2-", subfold, fixed=TRUE) | grepl("]-", subfold, fixed=TRUE)) & grepl("/fingerprint", subfold, fixed=TRUE)){
subfolder_neg <- subfolder_neg %>%
list.append(subfold)
}
}
fp_pos <- FingerPrintTablePOS(subfolder_pos, folderwithSIRIUSfiles)
if(nrow(fp_pos) != 0){
colnames(fp_pos) <- c(fp_names_pos, "predion", "id", "foldernumber", "predform")
}
fp_neg <- FingerPrintTableNEG(subfolder_neg, folderwithSIRIUSfiles)
if(nrow(fp_neg) != 0){
colnames(fp_neg) <- c(fp_names_neg, "predion", "id", "foldernumber", "predform")
}
if (!is.null(subfolder_neg) & !is.null(subfolder_pos)){
fp_all <- fp_pos %>%
select(id, foldernumber, predform, predion, all_of(fp_names_common)) %>%
bind_rows(fp_neg %>% select(id, foldernumber, predform, predion, all_of(fp_names_common))) %>%
unique()
}
if (is.null(subfolder_neg) & !is.null(subfolder_pos)){
fp_all <- fp_pos %>%
select(id, foldernumber, predform, predion, all_of(fp_names_common)) %>%
unique()
}
if (!is.null(subfolder_neg) & is.null(subfolder_pos)){
fp_all <- fp_neg %>%
select(id, foldernumber, predform, predion, all_of(fp_names_common)) %>%
unique()
}
if (is.null(subfolder_neg) & is.null(subfolder_pos)){
print("NO data found in subfolders")
}
return(fp_all)
}
library(rcdk)
detach("package:rcdklibs", unload = TRUE)
library(rcdklibs)
library(rcdklibs)
library(rcdk)
#' @export
FishLC50Prediction <- function(folderwithSIRIUSfiles, LC50mode = "static") {
mode <- LC50mode
error_message = ""
if(mode == "static"){
FishModel <- readRDS("R/20211118_fish_stat_finalapplic.rds")
} else if(mode == "flow"){
FishModel <- readRDS("R/20211126_fish_flow_finalapplic.rds")
} else{
error_message = 'LC50mode must me either "static" or "flow"'
}
if (error_message != 'LC50mode must me either "static" or "flow"') {
inputtable <- FpTableForPredictions(folderwithSIRIUSfiles)
predictions <- inputtable %>%
mutate(LC50_predicted = predict(FishModel, newdata = inputtable)) %>%
select(id, foldernumber, LC50_predicted, predform, predion) %>%
unique()
#return(predictions)
} else {
print('LC50mode must me either static or flow')
predictions = "LC50mode must me either static or flow"
}
return(predictions)
}
@import dplyr
import dplyr
library(MS2Tox)
#FishModel <- readRDS("R/20211118_fish_stat_finalapplic.rds")
FishModel <- read.RDS(system.file("models", "20211118_fish_stat_finalapplic.rds", package = "MS2Tox"))
FishModel <- system.file("models", "20211118_fish_stat_finalapplic.rds", package = "MS2Tox")
FishModel
FishModel <- system.file("models","20211126_fish_flow_finalapplic.rds", package = "MS2Tox")
